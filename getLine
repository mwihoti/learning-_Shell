#include "shell.h"

/**
 * input_buf - Reads and buffers chained commands.
 * @info: Pointer to the parameter struct.
 * @buf: Address of the buffer.
 * @len: Address of the length variable.
 *
 * Return: The number of bytes read.
 */
ssize_t input_buf(info_t *info, char **buf, size_t *len)
{
    ssize_t r = 0;
    size_t len_p = 0;

    if (!*len)
    {
        free(*buf);
        *buf = NULL;
        signal(SIGINT, sigintHandler);

        // Use getline if available, otherwise, use _getsline.
        #if USE_GETLINE
        r = getline(buf, &len_p, stdin);
        #else
        r = _getsline(info, buf, &len_p);
        #endif

        if (r > 0)
        {
            if ((*buf)[r - 1] == '\n')
            {
                (*buf)[r - 1] = '\0';
                r--;
            }
            info->linecount_flag = 1;
            rm_comments(*buf);
            build_history_list(info, *buf, info->histcount++);

            *len = r;
            info->cmd_buf = buf;
        }
    }
    return (r);
}

/**
 * gets_input - Gets a line of input without the newline character.
 * @info: Pointer to the parameter struct.
 *
 * Return: The number of bytes read.
 */
ssize_t gets_input(info_t *info)
{
    static char *buf;
    static size_t i, j, len;
    ssize_t r = 0;
    char **buf_p = &(info->arg), *p;

    _putchar(BUF_FLUSH);
    r = input_buf(info, &buf, &len);
    if (r == -1)
        return (-1);
    if (len)
    {
        j = i;
        p = buf + i;

        checks_chain(info, buf, &j, i, len);
        while (j < len)
        {
            if (is_chain(info, buf, &j))
                break;
            j++;
        }

        i = j + 1;
        if (i >= len)
        {
            i = len = 0;
            info->cmd_buf_type = CMD_NORM;
        }

        *buf_p = p;
        return (_strlen(p));
    }

    *buf_p = buf;
    return (r);
}

/**
 * read_buf - Reads data into a buffer.
 * @info: Pointer to the parameter struct.
 * @buf: The buffer to read into.
 * @i: The size of the buffer.
 *
 * Return: The number of bytes read.
 */
ssize_t read_buf(info_t *info, char *buf, size_t *i)
{
    ssize_t r = 0;

    if (*i)
        return (0);
    r = read(info->readfd, buf, READ_BUF_SIZE);
    if (r >= 0)
        *i = r;
    return (r);
}

/**
 * _getsline - Reads the next line of input from STDIN.
 * @info: Pointer to the parameter struct.
 * @ptr: Address of the pointer to the buffer, preallocated or NULL.
 * @length: Size of the preallocated ptr buffer if not NULL.
 *
 * Return: The number of bytes read.
 */
int _getsline(info_t *info, char **ptr, size_t *length)
{
    static char buf[READ_BUF_SIZE];
    static size_t i, len;
    size_t k;
    ssize_t r = 0, s = 0;
    char *p = NULL, *new_p = NULL, *c;

    p = *ptr;
    if (p && length)
        s = *length;
    if (i == len)
        i = len = 0;

    r = read_buf(info, buf, &len);
    if (r == -1 || (r == 0 && len == 0))
        return (-1);

    c = _strchr(buf + i, '\n');
    k = c ? 1 + (unsigned int)(c - buf) : len;
    new_p = _realloc(p, s, s ? s + k : k + 1);
    if (!new_p)
        return (p ? free(p), -1 : -1);

    if (s)
        _strncat(new_p, buf + i, k - i);
    else
        _strncpy(new_p, buf + i, k - i + 1);

    s += k - i;
    i = k;
    p = new_p;

    if (length)
        *length = s;
    *ptr = p;
    return (s);
}

/**
 * sigintHandler - Handles the SIGINT signal (Ctrl-C) by printing a prompt.
 * @sig_num: The signal number.
 *
 * Return: void
 */
void sigintHandler(__attribute__((unused)) int sig_num)
{
    _puts("\n");
    _puts("$ ");
    _putchar(BUF_FLUSH);
}
